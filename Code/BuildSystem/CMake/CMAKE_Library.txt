#cmake

#########################################################################################
## CMAKE Policies

# disables auto-linking to qtmain (new in Qt 5.1)
if (POLICY CMP0020)
  cmake_policy(SET CMP0020 NEW)
endif ()

if (POLICY CMP0022)
  cmake_policy(SET CMP0022 NEW)
endif()

if (POLICY CMP0043)
  cmake_policy(SET CMP0043 NEW)
endif()

# enable error on add dependency not existing
if (POLICY CMP0046)
  cmake_policy(SET CMP0046 NEW)
endif ()

# Get the name of this folder
get_filename_component (CUR_FOLDER_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)
get_filename_component (PARENT_FOLDER ${CMAKE_CURRENT_SOURCE_DIR} PATH)
get_filename_component (PARENT_FOLDER_NAME ${PARENT_FOLDER} NAME_WE)

# the library name
set (PROJECT_NAME "${CUR_FOLDER_NAME}")
set (PROJECT_FOLDER_NAME ${CUR_FOLDER_NAME})

message (STATUS "Adding Library: ${PROJECT_NAME}")

set (LIST_SOURCE_GROUP_FOLDER "")
set (LIST_CURRENT_FOLDER ${CMAKE_CURRENT_SOURCE_DIR})
set (ALL_SOURCE_FILES "")

set (LIBRARY_PCH TRUE)

#We need at least visual studio 2015 for this to work
if ((NATVIS_FILE) AND ((MSVC_VERSION GREATER 1900) OR (MSVC_VERSION EQUAL 1900)))
	SET(ALL_SOURCE_FILES ${ALL_SOURCE_FILES} ${NATVIS_FILE})
endif()

include (${CMAKE_CURRENT_LIST_DIR}/CMAKE_Qt.txt)
include (${CMAKE_CURRENT_LIST_DIR}/CMAKE_LibraryFolder.txt)

# Get the name of this folder
get_filename_component (CUR_FOLDER_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)

# add the name of the library to the list of libs to be exported
set_property (GLOBAL APPEND PROPERTY ALL_KNOWN_PROJECTS ${PROJECT_NAME})

# if this library uses a precompile header
if (BUILDSYSTEM_MSVC)
  ADD_MSVC_PRECOMPILED_HEADER ()
endif ()

string(TOUPPER ${PROJECT_NAME} PROJECT_NAME_UPPER)
add_definitions (-DBUILDSYSTEM_BUILDING_${PROJECT_NAME_UPPER}_LIB)

# Add the application source directory as an additional include dir (required to find PCH.h etc.)
include_directories (${CMAKE_CURRENT_SOURCE_DIR})

# add the library to the solution
if (EZ_COMPILE_ENGINE_AS_DLL)
  # add the project as a shared library
  add_library (${PROJECT_NAME} SHARED ${ALL_SOURCE_FILES})

  # for DLLs we need to know what other libraries to link against
  target_link_libraries (${PROJECT_NAME} ${LINK_LIBRARIES})

  # This sets which linker dependencies are passed through to other libraries.
  # Ie. agains which libraries other libraries are supposed to link, as well.
  # Setting this to empty, means that other libraries will NOT link against
  # any additional libraries, which should not be required anyway, since this
  # is a shared library which should already contain everything.
  set_target_properties(${PROJECT_NAME} PROPERTIES INTERFACE_LINK_LIBRARIES "")  
else ()
  # add the project as a static library
  add_library (${PROJECT_NAME} ${ALL_SOURCE_FILES})

  target_link_libraries (${PROJECT_NAME} ${LINK_LIBRARIES})
endif ()

if (BUILDSYSTEM_PLATFORM_LINUX)
  # Workaround for: https://bugs.launchpad.net/ubuntu/+source/gcc-5/+bug/1568899
  target_link_libraries (${PROJECT_NAME} "-lgcc_s -lgcc")
endif ()

if (BUILDSYSTEM_PLATFORM_OSX OR BUILDSYSTEM_PLATFORM_LINUX)
  find_package(X11 REQUIRED)
  include_directories (${X11_X11_INCLUDE_PATH})
  target_link_libraries (${PROJECT_NAME} ${X11_X11_LIB})
endif ()

set_target_properties(${PROJECT_NAME} PROPERTIES IMPORT_PREFIX "ez")
set_target_properties(${PROJECT_NAME} PROPERTIES PREFIX "ez")

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
file(RELATIVE_PATH RELATIVE_PARENT_FOLDER ${CMAKE_SOURCE_DIR} ${PARENT_FOLDER})
SET_PROPERTY(TARGET ${PROJECT_NAME} PROPERTY FOLDER ${RELATIVE_PARENT_FOLDER})

# Add additional dependencies
if (ADDITIONAL_DEPENDENCIES)
  add_dependencies(${PROJECT_NAME} ${ADDITIONAL_DEPENDENCIES})
endif ()

# if there are additional compiler settings, add them now
if (COMPILER_SETTINGS_ALL)
  set (COMPILER_SETTINGS_COPY ${COMPILER_SETTINGS_ALL})
  
  if (BUILDSYSTEM_PREVENT_STATIC_CODE_ANALYSIS)
    STRING(REGEX REPLACE "/analyze" "" COMPILER_SETTINGS_COPY ${COMPILER_SETTINGS_ALL})
  endif()

  set_target_properties (${PROJECT_NAME} PROPERTIES COMPILE_FLAGS "${COMPILER_SETTINGS_COPY}")
endif()
  
if (COMPILER_SETTINGS_RELEASE)
  target_compile_options(${PROJECT_NAME} PUBLIC $<$<CONFIG:RELEASE>:${COMPILER_SETTINGS_RELEASE}>)
  target_compile_options(${PROJECT_NAME} PUBLIC $<$<CONFIG:RELWITHDEBINFO>:${COMPILER_SETTINGS_RELEASE}>)
endif()

if (COMPILER_SETTINGS_DEBUG)
  target_compile_options(${PROJECT_NAME} PUBLIC $<$<CONFIG:DEBUG>:${COMPILER_SETTINGS_DEBUG}>)
endif ()

if (LINKER_SETTINGS_ALL)
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_DEBUG          ${LINKER_SETTINGS_ALL})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_RELWITHDEBINFO ${LINKER_SETTINGS_ALL})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_RELEASE        ${LINKER_SETTINGS_ALL})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_MINSIZEREL     ${LINKER_SETTINGS_ALL})
endif ()
if (LINKER_SETTINGS_DEBUG)
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_DEBUG          ${LINKER_SETTINGS_DEBUG})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_RELWITHDEBINFO ${LINKER_SETTINGS_DEBUG})

endif ()
if (LINKER_SETTINGS_RELEASE)
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_RELEASE        ${LINKER_SETTINGS_RELEASE})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_MINSIZEREL     ${LINKER_SETTINGS_RELEASE})
endif ()

QT_ADD_MODULES()
DX11_COPY_DLLS()
# Add to target list
ADD_TO_TARGET_LIST(C++)

#########################################################################################
## Libraries that everyone should be able to link to

#include ("${CMAKE_SOURCE_DIR}/ThirdParty/exports.cmake")



