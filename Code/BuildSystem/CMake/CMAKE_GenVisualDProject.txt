#cmake

# Get the name of this folder
get_filename_component (CUR_FOLDER_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)
get_filename_component (PARENT_FOLDER ${CMAKE_CURRENT_SOURCE_DIR} PATH)
get_filename_component (PARENT_FOLDER_NAME ${PARENT_FOLDER} NAME_WE)
get_filename_component (BINARY_DIR_NAME ${CMAKE_BINARY_DIR} NAME_WE)

file(RELATIVE_PATH DOBJ_DIR "${CMAKE_SOURCE_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}")
set(DOBJ_DIR "${CMAKE_BINARY_DIR}/${DOBJ_DIR}")

find_program(EZ_DMD "dmd.exe" PATHS "$ENV{EZ_DMD_PATH}/windows/bin" NO_DEFAULT_PATH)
string(REPLACE "/" "\\" EZ_DMD_PATH "${EZ_DMD}")

set(DPROJ_FILE "${CMAKE_CURRENT_SOURCE_DIR}/ez${PROJECT_NAME}_${BINARY_DIR_NAME}.visualdproj")

SET(LIBS "")
foreach(LIB ${LINK_LIBRARIES})
  SET(LIBS "${LIBS}ez${LIB}.lib ")
endforeach()

set(DINCLUDE_DIRS_FMT "")
foreach(INC ${DINCLUDE_DIRS})
  set(DINCLUDE_DIRS_FMT "${DINCLUDE_DIRS_FMT}&quot;${CMAKE_SOURCE_DIR}/${INC}&quot; ")
endforeach()

foreach(CONF DEBUG RELEASE MINSIZE RELWITHDEB)
  set(DPOST_BUILD_${CONF}_FMT "")
  foreach(CMD ${DPOST_BUILD_${CONF}})
    set(DPOST_BUILD_${CONF}_FMT "${DPOST_BUILD_${CONF}_FMT}${CMD}\n")
  endforeach()
  string(REPLACE "/" "\\" DPOST_BUILD_${CONF}_FMT "${DPOST_BUILD_${CONF}_FMT}")
endforeach()

if(PROJECT_TYPE STREQUAL "exe")
  SET(DOUTFILENAME "${PROJECT_NAME}.exe")
else()
  SET(DOUTFILENAME "ez${PROJECT_NAME}.${PROJECT_TYPE}")
endif()

function(WriteConfig DPROJ_FILE ConfigName DebugSymbols Release EzConfigName)
  file(APPEND ${DPROJ_FILE} " <Config name=\"${ConfigName}\" platform=\"x64\">\n")
  file(APPEND ${DPROJ_FILE} "  <obj>0</obj>\n")
  file(APPEND ${DPROJ_FILE} "  <link>0</link>\n")
  if(PROJECT_TYPE STREQUAL "dll")
    file(APPEND ${DPROJ_FILE} "  <lib>2</lib>\n")
  elseif(PROJECT_TYPE STREQUAL "lib")
    file(APPEND ${DPROJ_FILE} "  <lib>1</lib>\n")
  else()
    file(APPEND ${DPROJ_FILE} "  <lib>0</lib>\n")
  endif()
  file(APPEND ${DPROJ_FILE} "  <subsystem>0</subsystem>\n")
  file(APPEND ${DPROJ_FILE} "  <multiobj>0</multiobj>\n")
  file(APPEND ${DPROJ_FILE} "  <singleFileCompilation>0</singleFileCompilation>\n")
  file(APPEND ${DPROJ_FILE} "  <oneobj>0</oneobj>\n")
  file(APPEND ${DPROJ_FILE} "  <mscoff>0</mscoff>\n")
  file(APPEND ${DPROJ_FILE} "  <trace>0</trace>\n")
  file(APPEND ${DPROJ_FILE} "  <quiet>0</quiet>\n")
  file(APPEND ${DPROJ_FILE} "  <verbose>0</verbose>\n")
  file(APPEND ${DPROJ_FILE} "  <vtls>0</vtls>\n")
  file(APPEND ${DPROJ_FILE} "  <vgc>0</vgc>\n")
  if(DebugSymbols)
    file(APPEND ${DPROJ_FILE} "  <symdebug>2</symdebug>\n")
  else()
    file(APPEND ${DPROJ_FILE} "  <symdebug>0</symdebug>\n")
  endif()
  if(Release)
    file(APPEND ${DPROJ_FILE} "  <optimize>1</optimize>\n")
  else()
    file(APPEND ${DPROJ_FILE} "  <optimize>0</optimize>\n")
  endif()
  file(APPEND ${DPROJ_FILE} "  <cpu>0</cpu>\n")
  file(APPEND ${DPROJ_FILE} "  <isX86_64>1</isX86_64>\n")
  file(APPEND ${DPROJ_FILE} "  <isLinux>0</isLinux>\n")
  file(APPEND ${DPROJ_FILE} "  <isOSX>0</isOSX>\n")
  file(APPEND ${DPROJ_FILE} "  <isWindows>0</isWindows>\n")
  file(APPEND ${DPROJ_FILE} "  <isFreeBSD>0</isFreeBSD>\n")
  file(APPEND ${DPROJ_FILE} "  <isSolaris>0</isSolaris>\n")
  file(APPEND ${DPROJ_FILE} "  <scheduler>0</scheduler>\n")
  file(APPEND ${DPROJ_FILE} "  <useDeprecated>0</useDeprecated>\n")
  file(APPEND ${DPROJ_FILE} "  <errDeprecated>0</errDeprecated>\n")
  file(APPEND ${DPROJ_FILE} "  <useAssert>0</useAssert>\n")
  file(APPEND ${DPROJ_FILE} "  <useInvariants>0</useInvariants>\n")
  file(APPEND ${DPROJ_FILE} "  <useIn>0</useIn>\n")
  file(APPEND ${DPROJ_FILE} "  <useOut>0</useOut>\n")
  file(APPEND ${DPROJ_FILE} "  <useArrayBounds>0</useArrayBounds>\n")
  if(Release)
    file(APPEND ${DPROJ_FILE} "  <noboundscheck>1</noboundscheck>\n")
  else()
    file(APPEND ${DPROJ_FILE} "  <noboundscheck>0</noboundscheck>\n")
  endif()
  file(APPEND ${DPROJ_FILE} "  <useSwitchError>0</useSwitchError>\n")
  file(APPEND ${DPROJ_FILE} "  <useUnitTests>0</useUnitTests>\n")
  if(Release)
    file(APPEND ${DPROJ_FILE} "  <useInline>0</useInline>\n")
    file(APPEND ${DPROJ_FILE} "  <release>1</release>\n")
  else()
    file(APPEND ${DPROJ_FILE} "  <useInline>0</useInline>\n")
    file(APPEND ${DPROJ_FILE} "  <release>0</release>\n")
  endif()
  file(APPEND ${DPROJ_FILE} "  <preservePaths>0</preservePaths>\n")
  file(APPEND ${DPROJ_FILE} "  <warnings>0</warnings>\n")
  file(APPEND ${DPROJ_FILE} "  <infowarnings>0</infowarnings>\n")
  file(APPEND ${DPROJ_FILE} "  <checkProperty>0</checkProperty>\n")
  file(APPEND ${DPROJ_FILE} "  <genStackFrame>0</genStackFrame>\n")
  file(APPEND ${DPROJ_FILE} "  <pic>0</pic>\n")
  file(APPEND ${DPROJ_FILE} "  <cov>0</cov>\n")
  file(APPEND ${DPROJ_FILE} "  <nofloat>0</nofloat>\n")
  file(APPEND ${DPROJ_FILE} "  <Dversion>2</Dversion>\n")
  file(APPEND ${DPROJ_FILE} "  <ignoreUnsupportedPragmas>0</ignoreUnsupportedPragmas>\n")
  if(Release)
    file(APPEND ${DPROJ_FILE} "  <allinst>1</allinst>\n")
  else()
    file(APPEND ${DPROJ_FILE} "  <allinst>0</allinst>\n")
  endif()
  file(APPEND ${DPROJ_FILE} "  <stackStomp>0</stackStomp>\n")
  file(APPEND ${DPROJ_FILE} "  <compiler>0</compiler>\n")
  file(APPEND ${DPROJ_FILE} "  <otherDMD>1</otherDMD>\n")
  file(APPEND ${DPROJ_FILE} "  <cccmd>$(CC) -c</cccmd>\n")
  file(APPEND ${DPROJ_FILE} "  <ccTransOpt>1</ccTransOpt>\n")
  file(APPEND ${DPROJ_FILE} "  <program>${EZ_DMD_PATH}</program>\n")
  file(APPEND ${DPROJ_FILE} "  <imppath>${DINCLUDE_DIRS_FMT}</imppath>\n")
  file(APPEND ${DPROJ_FILE} "  <fileImppath />\n")
  if(PROJECT_TYPE STREQUAL "lib")
    file(APPEND ${DPROJ_FILE} "  <outdir>${OUTPUT_LIB_${EzConfigName}}</outdir>\n")
  else()
    file(APPEND ${DPROJ_FILE} "  <outdir>${OUTPUT_DLL_${EzConfigName}}</outdir>\n")
  endif()
  file(APPEND ${DPROJ_FILE} "  <objdir>${DOBJ_DIR}/${ConfigName}</objdir>\n")
  file(APPEND ${DPROJ_FILE} "  <objname />\n")
  file(APPEND ${DPROJ_FILE} "  <libname />\n")
  file(APPEND ${DPROJ_FILE} "  <doDocComments>0</doDocComments>\n")
  file(APPEND ${DPROJ_FILE} "  <docdir />\n")
  file(APPEND ${DPROJ_FILE} "  <docname />\n")
  file(APPEND ${DPROJ_FILE} "  <modules_ddoc />\n")
  file(APPEND ${DPROJ_FILE} "  <ddocfiles />\n")
  file(APPEND ${DPROJ_FILE} "  <doHdrGeneration>0</doHdrGeneration>\n")
  file(APPEND ${DPROJ_FILE} "  <hdrdir />\n")
  file(APPEND ${DPROJ_FILE} "  <hdrname />\n")
  file(APPEND ${DPROJ_FILE} "  <doXGeneration>1</doXGeneration>\n")
  file(APPEND ${DPROJ_FILE} "  <xfilename>$(IntDir)\$(TargetName).json</xfilename>\n")
  file(APPEND ${DPROJ_FILE} "  <debuglevel>0</debuglevel>\n")
  file(APPEND ${DPROJ_FILE} "  <debugids />\n")
  file(APPEND ${DPROJ_FILE} "  <versionlevel>0</versionlevel>\n")
  file(APPEND ${DPROJ_FILE} "  <versionids />\n")
  file(APPEND ${DPROJ_FILE} "  <dump_source>0</dump_source>\n")
  file(APPEND ${DPROJ_FILE} "  <mapverbosity>0</mapverbosity>\n")
  file(APPEND ${DPROJ_FILE} "  <createImplib>0</createImplib>\n")
  file(APPEND ${DPROJ_FILE} "  <defaultlibname />\n")
  file(APPEND ${DPROJ_FILE} "  <debuglibname />\n")
  file(APPEND ${DPROJ_FILE} "  <moduleDepsFile />\n")
  file(APPEND ${DPROJ_FILE} "  <run>0</run>\n")
  file(APPEND ${DPROJ_FILE} "  <runargs />\n")
  file(APPEND ${DPROJ_FILE} "  <runCv2pdb>0</runCv2pdb>\n")
  file(APPEND ${DPROJ_FILE} "  <pathCv2pdb>$(VisualDInstallDir)cv2pdb\\cv2pdb.exe</pathCv2pdb>\n")
  file(APPEND ${DPROJ_FILE} "  <cv2pdbPre2043>0</cv2pdbPre2043>\n")
  file(APPEND ${DPROJ_FILE} "  <cv2pdbNoDemangle>0</cv2pdbNoDemangle>\n")
  file(APPEND ${DPROJ_FILE} "  <cv2pdbEnumType>0</cv2pdbEnumType>\n")
  file(APPEND ${DPROJ_FILE} "  <cv2pdbOptions />\n")
  file(APPEND ${DPROJ_FILE} "  <objfiles />\n")
  file(APPEND ${DPROJ_FILE} "  <linkswitches />\n")
  file(APPEND ${DPROJ_FILE} "  <libfiles>${LIBS}</libfiles>\n")
  file(APPEND ${DPROJ_FILE} "  <libpaths>${OUTPUT_LIB_${EzConfigName}}</libpaths>\n")
  file(APPEND ${DPROJ_FILE} "  <deffile />\n")
  file(APPEND ${DPROJ_FILE} "  <resfile />\n")
  file(APPEND ${DPROJ_FILE} "  <exefile>$(OutDir)\\${DOUTFILENAME}</exefile>\n")
  file(APPEND ${DPROJ_FILE} "  <useStdLibPath>1</useStdLibPath>\n")
  if(Release)
    file(APPEND ${DPROJ_FILE} "  <cRuntime>3</cRuntime>\n")
  else()
    file(APPEND ${DPROJ_FILE} "  <cRuntime>4</cRuntime>\n")
  endif()
  SET(ADDITIONAL_OPTIONS "-L/NODEFAULTLIB:libcmt -L/IGNORE:4049 ")
  if(PROJECT_TYPE STREQUAL "dll")
    set(ADDITIONAL_OPTIONS "${ADDITIONAL_OPTIONS}-shared -L/IMPLIB:&quot;${OUTPUT_LIB_${EzConfigName}}/ez${PROJECT_NAME}.lib&quot; -L/DLL ")
  endif()
  if(Release)
    set(ADDITIONAL_OPTIONS "${ADDITIONAL_OPTIONS}-defaultlib=&quot;druntime64s.lib&quot; ")
	if(NOT PROJECT_TYPE STREQUAL "lib")
	  set(ADDITIONAL_OPTIONS "${ADDITIONAL_OPTIONS}phobos64s.lib ")
	endif()
  else()
    set(ADDITIONAL_OPTIONS "${ADDITIONAL_OPTIONS}-defaultlib=&quot;druntime64ds.lib&quot; -L/NODEFAULTLIB:msvcrt ")
	if(NOT PROJECT_TYPE STREQUAL "lib")
	  set(ADDITIONAL_OPTIONS "${ADDITIONAL_OPTIONS}phobos64ds.lib ")
	endif()   
  endif()
  if(DebugSymbols)
    set(ADDITIONAL_OPTIONS "${ADDITIONAL_OPTIONS}-op ")
  endif()
  file(APPEND ${DPROJ_FILE} "  <additionalOptions>${ADDITIONAL_OPTIONS}</additionalOptions>\n")
  file(APPEND ${DPROJ_FILE} "  <preBuildCommand />\n")
  file(APPEND ${DPROJ_FILE} "  <postBuildCommand>${DPOST_BUILD_${EzConfigName}_FMT}</postBuildCommand>\n")
  file(APPEND ${DPROJ_FILE} "  <filesToClean>*.obj;*.cmd;*.build;*.json;*.dep</filesToClean>\n")
  file(APPEND ${DPROJ_FILE} " </Config>\n")
endfunction(WriteConfig)

# write the header
file(WRITE ${DPROJ_FILE} "<DProject>\n")
file(APPEND ${DPROJ_FILE} " <ProjectGuid>{${DPROJ_GUID}}</ProjectGuid>\n")
WriteConfig("${DPROJ_FILE}" "Debug" TRUE FALSE "DEBUG")
WriteConfig("${DPROJ_FILE}" "Release" FALSE TRUE "RELEASE")
WriteConfig("${DPROJ_FILE}" "MinSizeRel" FALSE TRUE "MINSIZEREL")
WriteConfig("${DPROJ_FILE}" "RelWithDebInfo" TRUE TRUE "RELWITHDEB")
file(APPEND ${DPROJ_FILE} " <Folder name=\"${PROJECT_NAME}\">\n")

set(DFILES "")
foreach(DFILE ${DFILES_LIST})
  file(RELATIVE_PATH DFILE "${CMAKE_CURRENT_SOURCE_DIR}" "${DFILE}")
  string(REPLACE "/" "\\" DFILE "${DFILE}")
  list(APPEND DFILES "${DFILE}")
endforeach()
list(SORT DFILES)

set(LAST_DIRECTORY "")
SET(LEVEL 2)
SET(LEVEL_STR "  ")
foreach(DFILE ${DFILES})
  get_filename_component(DFILE_FOLDER ${DFILE} DIRECTORY)
  string(REPLACE "/" "\\" DFILE_FOLDER "${DFILE_FOLDER}")
  if(DFILE_FOLDER STREQUAL LAST_DIRECTORY)
    file(APPEND ${DPROJ_FILE} "${LEVEL_STR}<File path=\"${DFILE}\" />\n")
  else()
    string(REPLACE "\\" ";" DFILE_FOLDER_SPLIT "${DFILE_FOLDER}")  
	string(REPLACE "\\" ";" LAST_DIRECTORY_SPLIT "${LAST_DIRECTORY}")
	list(LENGTH DFILE_FOLDER_SPLIT DFILE_FOLDER_SPLIT_LENGTH)
	list(LENGTH LAST_DIRECTORY_SPLIT LAST_DIRECTORY_SPLIT_LENGTH)
	math(EXPR DFILE_FOLDER_SPLIT_LENGTH_MINUS_ONE "${DFILE_FOLDER_SPLIT_LENGTH} - 1")
	math(EXPR LAST_DIRECTORY_SPLIT_LENGTH_MINUS_ONE "${LAST_DIRECTORY_SPLIT_LENGTH} - 1")
	
	set(DIFFERENCE_AT 0)
	if(DFILE_FOLDER_SPLIT_LENGTH GREATER LAST_DIRECTORY_SPLIT_LENGTH)
	  if(LAST_DIRECTORY_SPLIT_LENGTH GREATER 0)
	      set(DIFFERENCE_AT ${LAST_DIRECTORY_SPLIT_LENGTH})
		  foreach(I RANGE 0 ${LAST_DIRECTORY_SPLIT_LENGTH_MINUS_ONE})
			list(GET DFILE_FOLDER_SPLIT ${I} CUR1)
			list(GET LAST_DIRECTORY_SPLIT ${I} CUR2)
			if(NOT CUR1 STREQUAL CUR2)
			  set(DIFFERENCE_AT ${I})
			  break()
			endif()		  
		  endforeach()
	  endif()
	else()
	  if(DFILE_FOLDER_SPLIT_LENGTH GREATER 0)
	      set(DIFFERENCE_AT ${DFILE_FOLDER_SPLIT_LENGTH})
		  foreach(I RANGE 0 ${DFILE_FOLDER_SPLIT_LENGTH_MINUS_ONE})
			list(GET DFILE_FOLDER_SPLIT ${I} CUR1)
			list(GET LAST_DIRECTORY_SPLIT ${I} CUR2)
			if(NOT CUR1 STREQUAL CUR2)
			  set(DIFFERENCE_AT ${I})
			  break()
			endif()		  
		  endforeach()
	  endif()
	endif()
	
	math(EXPR FOLDERS_TO_CLOSE "${LAST_DIRECTORY_SPLIT_LENGTH} - ${DIFFERENCE_AT} - 1")
	if(NOT FOLDERS_TO_CLOSE LESS 0)
	  foreach(I RANGE 0 ${FOLDERS_TO_CLOSE})
		math(EXPR LEVEL "${LEVEL} - 1")
		string(SUBSTRING "                        " 0 ${LEVEL} LEVEL_STR)
		file(APPEND ${DPROJ_FILE} "${LEVEL_STR}</Folder>\n")
	  endforeach()
	endif()

	
	math(EXPR FOLDERS_TO_CREATE "${DFILE_FOLDER_SPLIT_LENGTH} - ${DIFFERENCE_AT} - 1")
	if(NOT FOLDERS_TO_CREATE LESS 0)
	  foreach(I RANGE 0 ${FOLDERS_TO_CREATE})
	    math(EXPR CUR "${I} + ${DIFFERENCE_AT}")
	    list(GET DFILE_FOLDER_SPLIT ${CUR} CUR)
	    file(APPEND ${DPROJ_FILE} "${LEVEL_STR}<Folder name=\"${CUR}\">\n")
		math(EXPR LEVEL "${LEVEL} + 1")
		string(SUBSTRING "                        " 0 ${LEVEL} LEVEL_STR)
	  endforeach()
	endif()
	
	
	file(APPEND ${DPROJ_FILE} "${LEVEL_STR}<File path=\"${DFILE}\" />\n")
  endif()
  set(LAST_DIRECTORY "${DFILE_FOLDER}")
endforeach()

string(REPLACE "\\" ";" LAST_DIRECTORY_SPLIT "${LAST_DIRECTORY}")
list(LENGTH LAST_DIRECTORY_SPLIT LAST_DIRECTORY_SPLIT_LENGTH)
math(EXPR LAST_DIRECTORY_SPLIT_LENGTH_MINUS_ONE "${LAST_DIRECTORY_SPLIT_LENGTH} - 1")
if(LAST_DIRECTORY_SPLIT_LENGTH GREATER 0)
  foreach(I RANGE 0 ${LAST_DIRECTORY_SPLIT_LENGTH_MINUS_ONE})
	math(EXPR LEVEL "${LEVEL} - 1")
	string(SUBSTRING "                        " 0 ${LEVEL} LEVEL_STR)
	file(APPEND ${DPROJ_FILE} "${LEVEL_STR}</Folder>\n")
  endforeach()
endif()


file(APPEND ${DPROJ_FILE} " </Folder>\n")
file(APPEND ${DPROJ_FILE} "</DProject>")

message (STATUS "Adding VisualD Project: ${PROJECT_NAME}")

# Add the external DTestLib
file(RELATIVE_PATH RELATIVE_PARENT_FOLDER ${CMAKE_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR})
INCLUDE_EXTERNAL_MSPROJECT("${PROJECT_NAME}" "${DPROJ_FILE}"
                           TYPE 002A2DE9-8BB6-484D-9802-7E4AD4084715
                           GUID ${DPROJ_GUID}
						   ${LINK_LIBRARIES})
						   
SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
file(RELATIVE_PATH RELATIVE_PARENT_FOLDER ${CMAKE_SOURCE_DIR} ${PARENT_FOLDER})
SET_PROPERTY(TARGET ${PROJECT_NAME} PROPERTY FOLDER ${RELATIVE_PARENT_FOLDER})

ADD_TO_TARGET_LIST(D)