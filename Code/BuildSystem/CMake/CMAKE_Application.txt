#cmake

#########################################################################################
## CMAKE Policies

# disables auto-linking to qtmain (new in Qt 5.1)
if (POLICY CMP0020)
  cmake_policy(SET CMP0020 NEW)
endif ()

if (POLICY CMP0022)
  cmake_policy(SET CMP0022 NEW)
endif()

if (POLICY CMP0043)
  cmake_policy(SET CMP0043 NEW)
endif()

# enable error on add dependency not existing
if (POLICY CMP0046)
  cmake_policy(SET CMP0046 NEW)
endif ()

# Get the name of this folder
get_filename_component (CUR_FOLDER_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)
get_filename_component (PARENT_FOLDER ${CMAKE_CURRENT_SOURCE_DIR} PATH)
get_filename_component (PARENT_FOLDER_NAME ${PARENT_FOLDER} NAME_WE)

# the library name
set (PROJECT_NAME "${CUR_FOLDER_NAME}")
set (PROJECT_FOLDER_NAME ${CUR_FOLDER_NAME})

message (STATUS "Adding Application: ${PROJECT_NAME}")

set (LIST_SOURCE_GROUP_FOLDER "")
set (LIST_CURRENT_FOLDER ${CMAKE_CURRENT_SOURCE_DIR})
set (ALL_SOURCE_FILES "")

set (LIBRARY_PCH FALSE)

include (${CMAKE_CURRENT_LIST_DIR}/CMAKE_Qt.txt)
include (${CMAKE_CURRENT_LIST_DIR}/CMAKE_LibraryFolder.txt)

set (APP_CONFIG "")

if (IS_WIN32_APPLICATION)
	set (APP_CONFIG "WIN32")
endif ()

# if this application uses a precompile header
if (BUILDSYSTEM_MSVC)
  ADD_MSVC_PRECOMPILED_HEADER()
endif ()

# Setup package if necessary
# TODO: Move to somewhere else
if (BUILDSYSTEM_PLATFORM_WINDOWS_UWP)
  set(CONTENT_DIRECTORY_DST "${CMAKE_CURRENT_BINARY_DIR}/Assets/")
  set(CONTENT_DIRECTORY_SRC "${CMAKE_SOURCE_DIR}/Data/Platform/UWP/")

  # Copy content files.
  set(UWP_ASSET_NAMES 
      "LockScreenLogo.scale-200.png"
      "SplashScreen.scale-200.png"
      "Square44x44Logo.scale-200.png"
      "Square44x44Logo.targetsize-24_altform-unplated.png"
      "Square150x150Logo.scale-200.png"
      "StoreLogo.png"
      "Wide310x150Logo.scale-200.png"
      "Windows_TemporaryKey.pfx")

  FOREACH(contentFile ${UWP_ASSET_NAMES})
    configure_file(${CONTENT_DIRECTORY_SRC}${contentFile} ${CONTENT_DIRECTORY_DST}${contentFile} COPYONLY)
    list(APPEND UWP_ASSETS ${CONTENT_DIRECTORY_DST}${contentFile})
  ENDFOREACH(contentFile)

  set_property(SOURCE ${UWP_ASSETS} PROPERTY VS_DEPLOYMENT_LOCATION "Assets")
  set_property(SOURCE ${UWP_ASSETS} PROPERTY VS_DEPLOYMENT_CONTENT 1)

  # Create Manifest from template.
  get_filename_component(SHORT_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)
  set(IDENTITY_NAME "${SHORT_NAME}-${CONFIGURATION_DESC}")
  set(PACKAGE_GUID 3370B74B-62B8-4009-828B-01A02CB4AB56)
  string(UUID PACKAGE_GUID NAMESPACE ${PACKAGE_GUID} NAME "ezEngine!" TYPE MD5) # Generate GUID

  # Add spatial perception to appx manifest if we're linking against WindowsMixedReality.
  if (WindowsMixedReality IN_LIST LINK_LIBRARIES)
    set(EXTRA_APP_CAPABILITIES "<uap2:Capability Name=\"spatialPerception\"/>")
  endif()

  configure_file(${CONTENT_DIRECTORY_SRC}/package_template.appxmanifest ${CONTENT_DIRECTORY_DST}Package.appxmanifest @ONLY)


  list(APPEND UWP_ASSETS ${CONTENT_DIRECTORY_DST}Package.appxmanifest)

  # Include all content.
  source_group("Assets" FILES ${UWP_ASSETS})
  set(CONTENT_FILES ${CONTENT_FILES} ${UWP_ASSETS})
endif()

# Add the application source directory as an additional include dir (required to find PCH.h etc.)
include_directories (${CMAKE_CURRENT_SOURCE_DIR})

# Define the Exe Project, add all required sources to it
add_executable (${PROJECT_NAME} ${APP_CONFIG} ${ALL_SOURCE_FILES} ${CONTENT_FILES})

target_link_libraries (${PROJECT_NAME} ${LINK_LIBRARIES} ${QT_LIBRARIES} ${OPENGL_gl_LIBRARY} ${OPENGL_glu_LIBRARY})

# Add additional dependencies
if (ADDITIONAL_DEPENDENCIES)
  add_dependencies(${PROJECT_NAME} ${ADDITIONAL_DEPENDENCIES})
endif ()

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
file(RELATIVE_PATH RELATIVE_PARENT_FOLDER ${CMAKE_SOURCE_DIR} ${PARENT_FOLDER})
SET_PROPERTY(TARGET ${PROJECT_NAME} PROPERTY FOLDER ${RELATIVE_PARENT_FOLDER})


if (BUILDSYSTEM_PLATFORM_OSX OR BUILDSYSTEM_PLATFORM_LINUX)
  find_package(X11 REQUIRED)
  include_directories (${X11_X11_INCLUDE_PATH})
  target_link_libraries (${PROJECT_NAME} ${X11_X11_LIB})
endif ()

string(TOUPPER ${PROJECT_NAME} PROJECT_NAME_UPPER)
add_definitions (-DBUILDSYSTEM_BUILDING_${PROJECT_NAME_UPPER})

# We need to link against X11, pthread and rt last or linker errors will occur.
if (BUILDSYSTEM_COMPILER_GCC)
	target_link_libraries (${PROJECT_NAME} pthread rt)
endif ()

if (COMPILER_SETTINGS_ALL)
  set_target_properties (${PROJECT_NAME} PROPERTIES COMPILE_FLAGS "${COMPILER_SETTINGS_ALL}")
endif ()

if (COMPILER_SETTINGS_RELEASE)
  target_compile_options(${PROJECT_NAME} PUBLIC $<$<CONFIG:RELEASE>:${COMPILER_SETTINGS_RELEASE}>)
  target_compile_options(${PROJECT_NAME} PUBLIC $<$<CONFIG:RELWITHDEBINFO>:${COMPILER_SETTINGS_RELEASE}>)
endif()

if (COMPILER_SETTINGS_DEBUG)
  target_compile_options(${PROJECT_NAME} PUBLIC $<$<CONFIG:DEBUG>:${COMPILER_SETTINGS_DEBUG}>)
endif ()

if (LINKER_SETTINGS_ALL)
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_DEBUG          ${LINKER_SETTINGS_ALL})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_RELWITHDEBINFO ${LINKER_SETTINGS_ALL})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_RELEASE        ${LINKER_SETTINGS_ALL})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_MINSIZEREL     ${LINKER_SETTINGS_ALL})
endif ()
if (LINKER_SETTINGS_DEBUG)
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_DEBUG          ${LINKER_SETTINGS_DEBUG})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_RELWITHDEBINFO ${LINKER_SETTINGS_DEBUG})

endif ()
if (LINKER_SETTINGS_RELEASE)
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_RELEASE        ${LINKER_SETTINGS_RELEASE})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_MINSIZEREL     ${LINKER_SETTINGS_RELEASE})
endif ()

# UWP has deployment problems if all applications output to the same path.
if (BUILDSYSTEM_PLATFORM_WINDOWS_UWP)
  set_target_properties(${PROJECT_NAME} PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY                "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${PROJECT_NAME}"
    RUNTIME_OUTPUT_DIRECTORY_DEBUG          "${CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG}/${PROJECT_NAME}"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE        "${CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE}/${PROJECT_NAME}"
    RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL     "${CMAKE_RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL}/${PROJECT_NAME}"
    RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO "${CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO}/${PROJECT_NAME}"
  )
endif()

QT_ADD_MODULES()
DX11_COPY_DLLS()

# Add to target list
ADD_TO_TARGET_LIST(C++)

