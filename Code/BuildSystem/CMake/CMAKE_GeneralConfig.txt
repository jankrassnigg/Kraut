#cmake

# Use this to get all current variables of cmake
#get_cmake_property(_variableNames VARIABLES)
#foreach (_variableName ${_variableNames})
#    message(STATUS "${_variableName}=${${_variableName}}")
#endforeach()

#########################################################################################
## CMAKE Policies

# disables auto-linking to qtmain (new in Qt 5.1)
if (POLICY CMP0020)
  cmake_policy(SET CMP0020 NEW)
endif ()

if (POLICY CMP0022)
  cmake_policy(SET CMP0022 NEW)
endif()

if (POLICY CMP0043)
  cmake_policy(SET CMP0043 NEW)
endif()

# enable error on add dependency not existing
if (POLICY CMP0046)
  cmake_policy(SET CMP0046 NEW)
endif ()

#########################################################################################
## Other configurations

set (COMPILER_SETTINGS_ALL "")
set (COMPILER_SETTINGS_RELEASE "")
set (COMPILER_SETTINGS_DEBUG "")

set (LINKER_SETTINGS_ALL "")
set (LINKER_SETTINGS_RELEASE "")
set (LINKER_SETTINGS_DEBUG "")

# Doesn't work on OSX:
#set (CMAKE_C_COMPILER ${CMAKE_CXX_COMPILER}) # use the C++ compiler also for C code
#set (CMAKE_DEBUG_POSTFIX "_d") # you could add a postfix for debug libraries here

# set the default build type
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Debug CACHE STRING
      "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
      FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

# Required to find cmake modules like 'FindDirectX.cmake'
set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_LIST_DIR})

#########################################################################################
## Detects the current platform

set (PLATFORM_PREFIX "")

if (CMAKE_SYSTEM_NAME STREQUAL "Windows")
  # Windows
  message (STATUS "Platform is Windows (BUILDSYSTEM_PLATFORM_WINDOWS)")
  set (BUILDSYSTEM_PLATFORM_WINDOWS ON)
  set (BUILDSYSTEM_PLATFORM_WINDOWS_DESKTOP ON)
  set (PLATFORM_PREFIX "Win")
  if( ${CMAKE_SYSTEM_VERSION} EQUAL 6.1 ) # Windows 7
    set (BUILDSYSTEM_PLATFORM_WINDOWS_7 ON)
  endif()

elseif (CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
  # Windows Universal
  message (STATUS "Platform is Windows Universal (BUILDSYSTEM_PLATFORM_WINDOWS_UWP)")
  set (BUILDSYSTEM_PLATFORM_WINDOWS ON)
  set (BUILDSYSTEM_PLATFORM_WINDOWS_UWP ON)
  set (PLATFORM_PREFIX "WinUWP")

elseif (CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CURRENT_OSX_VERSION)
  # OS X
  message (STATUS "Platform is OS X (BUILDSYSTEM_PLATFORM_OSX, BUILDSYSTEM_PLATFORM_POSIX)")
  set (BUILDSYSTEM_PLATFORM_OSX ON)
  set (BUILDSYSTEM_PLATFORM_POSIX ON)
  set (PLATFORM_PREFIX "Osx")

elseif (CMAKE_SYSTEM_NAME STREQUAL "Linux")
  # Linux
  message (STATUS "Platform is Linux (BUILDSYSTEM_PLATFORM_LINUX, BUILDSYSTEM_PLATFORM_POSIX)")
  set (BUILDSYSTEM_PLATFORM_LINUX ON)
  set (BUILDSYSTEM_PLATFORM_POSIX ON)
  set (PLATFORM_PREFIX "Linux")

else ()
  message (FATAL_ERROR "Platform '${CMAKE_SYSTEM_NAME}' is not supported! Please extend CMAKE_GeneralConfig.txt.")
endif ()


#########################################################################################
## Detects the current build-system / generator

set (BUILDSYSTEM_PREFIX "")

if (BUILDSYSTEM_PLATFORM_WINDOWS)
  # Supported windows generators
  if (MSVC)
    # Visual Studio (All VS generators define MSVC)
    message (STATUS "Buildsystem is MSVC (BUILDSYSTEM_MSVC)")
    set (BUILDSYSTEM_MSVC ON)
    set (BUILDSYSTEM_PREFIX "Vs")
    set (BUILDSYSTEM_CONFIGURATION $<CONFIGURATION>)
  else ()
    message (FATAL_ERROR "Generator '${CMAKE_GENERATOR}' is not supported on Windows! Please extend CMAKE_GeneralConfig.txt.")
  endif ()

elseif (BUILDSYSTEM_PLATFORM_OSX)
  # Supported OSX generators
  if (CMAKE_GENERATOR STREQUAL "Xcode")
    # XCODE
    message (STATUS "Buildsystem is Xcode (BUILDSYSTEM_XCODE)")
    set (BUILDSYSTEM_XCODE ON)
    set (BUILDSYSTEM_PREFIX "Xcode")
    set (BUILDSYSTEM_CONFIGURATION $<CONFIGURATION>)
  elseif (CMAKE_GENERATOR STREQUAL "Unix Makefiles")
    # Unix Makefiles (for QtCreator etc.)
    message (STATUS "Buildsystem is Make (BUILDSYSTEM_MAKE)")
    set (BUILDSYSTEM_MAKE ON)
    set (BUILDSYSTEM_PREFIX "Make")
    set (BUILDSYSTEM_CONFIGURATION ${CMAKE_BUILD_TYPE})
  else ()
    message (FATAL_ERROR "Generator '${CMAKE_GENERATOR}' is not supported on OS X! Please extend CMAKE_GeneralConfig.txt.")
  endif ()

elseif (BUILDSYSTEM_PLATFORM_LINUX)
  if (CMAKE_GENERATOR STREQUAL "Unix Makefiles")
    # Unix Makefiles (for QtCreator etc.)
    message (STATUS "Buildsystem is Make (BUILDSYSTEM_MAKE)")
    set (BUILDSYSTEM_MAKE ON)
    set (BUILDSYSTEM_PREFIX "Make")
    set (BUILDSYSTEM_CONFIGURATION ${CMAKE_BUILD_TYPE})
  else ()
    message (FATAL_ERROR "Generator '${CMAKE_GENERATOR}' is not supported on Linux! Please extend CMAKE_GeneralConfig.txt.")
  endif ()

else ()
  message (FATAL_ERROR "Platform '${CMAKE_SYSTEM_NAME}' has not setup the supported generators. Please extend CMAKE_GeneralConfig.txt.")
endif ()

#########################################################################################
## Detects the current compiler

set (COMPILER_POSTFIX "")

if (BUILDSYSTEM_MSVC)
  # Visual Studio Compiler
  message (STATUS "Compiler is MSVC (BUILDSYSTEM_COMPILER_MSVC)")
  message (STATUS "MSVC_VERSION is ${MSVC_VERSION}")
  
  set (BUILDSYSTEM_COMPILER_MSVC ON)

  if(MSVC_VERSION GREATER_EQUAL 1910)
    message (STATUS "Compiler is Visual Studio 2017 (BUILDSYSTEM_COMPILER_MSVC_141)")
    set (BUILDSYSTEM_COMPILER_MSVC_141 ON)
    set (COMPILER_POSTFIX "2017")
  elseif (MSVC_VERSION GREATER_EQUAL 1900)
    message (STATUS "Compiler is Visual Studio 2015 (BUILDSYSTEM_COMPILER_MSVC_140)")
    set (BUILDSYSTEM_COMPILER_MSVC_140 ON)
    set (COMPILER_POSTFIX "2015")
  else ()
    message (FATAL_ERROR "Compiler for generator '${CMAKE_GENERATOR}' is not supported on MSVC! Please extend CMAKE_GeneralConfig.txt.")
  endif ()

elseif (BUILDSYSTEM_PLATFORM_OSX)
  # Currently all are clang by default.
  # We should probably make this more idiot-proof in case someone actually changes the compiler to gcc.
  message (STATUS "Compiler is clang (BUILDSYSTEM_COMPILER_CLANG)")
  set (BUILDSYSTEM_COMPILER_CLANG ON)
  set (COMPILER_POSTFIX "Clang")

elseif (BUILDSYSTEM_PLATFORM_LINUX)
  # Currently all are gcc by default. See OSX comment.
  message (STATUS "Compiler is gcc (BUILDSYSTEM_COMPILER_GCC)")
  set (BUILDSYSTEM_COMPILER_GCC ON)
  set (COMPILER_POSTFIX "Gcc")

else ()
  message (FATAL_ERROR "Compiler for generator '${CMAKE_GENERATOR}' is not supported on '${CMAKE_SYSTEM_NAME}'. Please extend CMAKE_GeneralConfig.txt.")
endif ()


#########################################################################################
## Detects the current architecture

set (ARCHITECTURE_POSTFIX "")

if (BUILDSYSTEM_PLATFORM_WINDOWS AND BUILDSYSTEM_COMPILER_MSVC)
  # Detect 64-bit builds for MSVC.
  if (CMAKE_CL_64)
    message (STATUS "Platform is 64-Bit (BUILDSYSTEM_PLATFORM_64BIT)")
    set (BUILDSYSTEM_PLATFORM_64BIT ON)
    set (ARCHITECTURE_POSTFIX "64")
  else ()
    message (STATUS "Platform is 32-Bit (BUILDSYSTEM_PLATFORM_32BIT)")
    set (BUILDSYSTEM_PLATFORM_32BIT ON)
    set (ARCHITECTURE_POSTFIX "32")
  endif ()

elseif (BUILDSYSTEM_PLATFORM_OSX AND BUILDSYSTEM_COMPILER_CLANG)
  # OS X always has 32/64 bit support in the project files and the user switches on demand.
  # However, we do not support 32 bit with our current build configuration so we throw an error on 32-bit systems.
  if (CMAKE_SIZEOF_VOID_P EQUAL 8)
    message (STATUS "Platform is 64-Bit (BUILDSYSTEM_PLATFORM_64BIT)")
    set (BUILDSYSTEM_PLATFORM_64BIT ON)
    set (ARCHITECTURE_POSTFIX "64")
  else ()
    message (FATAL_ERROR "32-Bit is not supported on OS X!")
  endif ()

elseif (BUILDSYSTEM_PLATFORM_LINUX AND BUILDSYSTEM_COMPILER_GCC)
  # Detect 64-bit builds for Linux, no other way than checking CMAKE_SIZEOF_VOID_P.
  if (CMAKE_SIZEOF_VOID_P EQUAL 8)
    message (STATUS "Platform is 64-Bit (BUILDSYSTEM_PLATFORM_64BIT)")
    set (BUILDSYSTEM_PLATFORM_64BIT ON)
    set (ARCHITECTURE_POSTFIX "64")
  else ()
    message (STATUS "Platform is 32-Bit (BUILDSYSTEM_PLATFORM_32BIT)")
    set (BUILDSYSTEM_PLATFORM_32BIT ON)
    set (ARCHITECTURE_POSTFIX "32")
  endif ()

else ()
  message (FATAL_ERROR "Architecture could not be determined. Please extend CMAKE_GeneralConfig.txt.")
endif ()


#########################################################################################
## Configuration Variables
## Add your variables here, if you need something (general) to configure from the cmake GUI

# Define GUI Variables to configure the project
if (BUILDSYSTEM_PLATFORM_WINDOWS)
  set (EZ_COMPILE_ENGINE_AS_DLL ON CACHE BOOL "Whether to compile the code as a shared libraries (DLL).")
endif()

#set (EZ_STRICT_WARNINGS OFF CACHE BOOL "Whether to compile the code with highest warning level. Good luck with that.")
set (EZ_ENABLE_QT_SUPPORT ON CACHE BOOL "Whether to add Qt support.")
set (EZ_QT_DIR $ENV{QTDIR} CACHE PATH "Directory of qt installation")
set (EZ_QT_DIR_FOUND "NOT_FOUND" CACHE PATH "Last found directory of qt installation")
mark_as_advanced(FORCE EZ_QT_DIR_FOUND)
set (EZ_USE_PCH ON CACHE BOOL "Whether to use Precompiled Headers.")
set (EZ_IGNORE_USERCONFIG_HEADER OFF CACHE BOOL "When disabled certain compile settings need to be configured through the UserConfig.h file in ezFoundation. When enabled those settings can be done from CMake. Do not enable this when you want to build ezEngine with CMake but then use that library in another project, as the settings in UserConfig.h and the pre-built library will differ.")
set (EZ_ENABLE_D_SCRIPT OFF CACHE BOOL "If D Scripting should be enabled")
set (EZ_USE_VISUALD OFF CACHE BOOL "If VisualD is installed on the system and should be used for D projects")
set (EZ_BUILD_SAMPLES ON CACHE BOOL "Whether sample projects should be added to the solution")
set (EZ_BUILD_GAMES OFF CACHE BOOL "Whether game projects should be added to the solution")
set (EZ_BUILD_UNITTESTS ON CACHE BOOL "Whether unit-test projects should be added to the solution")
set (EZ_BUILD_PHYSX OFF CACHE BOOL "Whether support for nVidia PhysX should be added")
set (EZ_BUILD_KRAUT ON CACHE BOOL "Whether support for Kraut should be added")
set (EZ_BUILD_FMOD OFF CACHE BOOL "Whether support for FMod should be added")
set (EZ_BUILD_OFFICIAL_FBX_SDK OFF CACHE BOOL "Whether to use the official Autodesk FBX SDK or not")
set (EZ_ENABLE_FOLDER_UNITY_FILES ON CACHE BOOL "Whether unity cpp files should be created per folder")
set (EZ_ENABLE_PVS_STUDIO_HEADER_IN_UNITY_FILES ON CACHE BOOL "Adds the necessary comment to the generated unity files for PVS checking")
set (EZ_ENABLE_ENET_SUPPORT ON CACHE BOOL "Whether to add support for Enet. This is needed for Telemetry.")
set (EZ_ENABLE_LUA_SUPPORT ON CACHE BOOL "Whether to add support for Lua.")
set (EZ_ENABLE_ZLIB_SUPPORT ON CACHE BOOL "Whether to add support for zlib.")
set (EZ_ENABLE_MIXEDREALITY_SUPPORT OFF CACHE BOOL "Whether to add support for Windows Mixed Reality.")

set (EZ_OUTPUT_DIRECTORY_LIB "${CMAKE_SOURCE_DIR}/Output/Lib" CACHE PATH "Where to store the compiled .lib files.")
set (EZ_OUTPUT_DIRECTORY_DLL "${CMAKE_SOURCE_DIR}/Output/Bin" CACHE PATH "Where to store the compiled .dll files.")


#########################################################################################
## set output-path for binaries

set (OUTPUT_LIB_DEBUG       "${EZ_OUTPUT_DIRECTORY_LIB}/${PLATFORM_PREFIX}${BUILDSYSTEM_PREFIX}${COMPILER_POSTFIX}Debug${ARCHITECTURE_POSTFIX}")
set (OUTPUT_LIB_RELEASE     "${EZ_OUTPUT_DIRECTORY_LIB}/${PLATFORM_PREFIX}${BUILDSYSTEM_PREFIX}${COMPILER_POSTFIX}Release${ARCHITECTURE_POSTFIX}")
set (OUTPUT_LIB_MINSIZE     "${EZ_OUTPUT_DIRECTORY_LIB}/${PLATFORM_PREFIX}${BUILDSYSTEM_PREFIX}${COMPILER_POSTFIX}MinSize${ARCHITECTURE_POSTFIX}")
set (OUTPUT_LIB_RELWITHDEB  "${EZ_OUTPUT_DIRECTORY_LIB}/${PLATFORM_PREFIX}${BUILDSYSTEM_PREFIX}${COMPILER_POSTFIX}RelDeb${ARCHITECTURE_POSTFIX}")

set (OUTPUT_DLL_DEBUG       "${EZ_OUTPUT_DIRECTORY_DLL}/${PLATFORM_PREFIX}${BUILDSYSTEM_PREFIX}${COMPILER_POSTFIX}Debug${ARCHITECTURE_POSTFIX}")
set (OUTPUT_DLL_RELEASE     "${EZ_OUTPUT_DIRECTORY_DLL}/${PLATFORM_PREFIX}${BUILDSYSTEM_PREFIX}${COMPILER_POSTFIX}Release${ARCHITECTURE_POSTFIX}")
set (OUTPUT_DLL_MINSIZE     "${EZ_OUTPUT_DIRECTORY_DLL}/${PLATFORM_PREFIX}${BUILDSYSTEM_PREFIX}${COMPILER_POSTFIX}MinSize${ARCHITECTURE_POSTFIX}")
set (OUTPUT_DLL_RELWITHDEB  "${EZ_OUTPUT_DIRECTORY_DLL}/${PLATFORM_PREFIX}${BUILDSYSTEM_PREFIX}${COMPILER_POSTFIX}RelDeb${ARCHITECTURE_POSTFIX}")

message (STATUS "CMAKE_SOURCE_DIR is: ${CMAKE_SOURCE_DIR}")
message (STATUS "Output Folder for DLLs is: ${EZ_OUTPUT_DIRECTORY_DLL}")
message (STATUS "Output Folder for Libs is: ${EZ_OUTPUT_DIRECTORY_LIB}")

set (CMAKE_RUNTIME_OUTPUT_DIRECTORY                 "${OUTPUT_DLL_DEBUG}")
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG           "${OUTPUT_DLL_DEBUG}")
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE         "${OUTPUT_DLL_RELEASE}")
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL      "${OUTPUT_DLL_MINSIZE}")
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO  "${OUTPUT_DLL_RELWITHDEB}")

set (CMAKE_LIBRARY_OUTPUT_DIRECTORY                 "${OUTPUT_LIB_DEBUG}")
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG           "${OUTPUT_LIB_DEBUG}")
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE         "${OUTPUT_LIB_RELEASE}")
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL      "${OUTPUT_LIB_MINSIZE}")
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO  "${OUTPUT_LIB_RELWITHDEB}")

set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY                 "${OUTPUT_LIB_DEBUG}")
set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG           "${OUTPUT_LIB_DEBUG}")
set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE         "${OUTPUT_LIB_RELEASE}")
set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL      "${OUTPUT_LIB_MINSIZE}")
set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO  "${OUTPUT_LIB_RELWITHDEB}")

#Write configuration to file, as this is done at configure time we must pin the configuration in place (RelDeb is used because all build machines use this).
file(WRITE ${CMAKE_BINARY_DIR}/Configuration.txt "")
set(CONFIGURATION_DESC "${PLATFORM_PREFIX}${BUILDSYSTEM_PREFIX}${COMPILER_POSTFIX}RelDeb${ARCHITECTURE_POSTFIX}")
file(APPEND ${CMAKE_BINARY_DIR}/Configuration.txt ${CONFIGURATION_DESC})


#########################################################################################
## Compiler specific settings
set(CMAKE_CXX_STANDARD 14)
if (BUILDSYSTEM_COMPILER_MSVC)
  # Enable minimal rebuild
  #set (COMPILER_SETTINGS_DEBUG "${COMPILER_SETTINGS_DEBUG} /Gm")
  # enable multi-threaded compilation
  set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /MP")
  # disable RTTI
  set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /GR-")
  # use fast floating point model
  set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /fp:fast")
  # enable floating point exceptions
  #set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /fp:except")
  # enable default exception handling
  set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /EHsc")

  # enable standard conform casting behavior - casting results always in rvalue
  set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /Zc:rvalueCast")

  # enable strict warnings
  #if (EZ_STRICT_WARNINGS)
  #  set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /W4")
  #endif()
  # treat warnings as errors
  # Todo: We're not there yet for Clang on windows.
  if (NOT CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    #set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /WX")
  endif()

  if (BUILDSYSTEM_PLATFORM_32BIT)
    # enable SSE2 (incompatible with /fp:except)
    set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /arch:SSE2")

    if(MSVC10)
      # enable static code analysis, only works on 32 Bit builds
      # (may cause compile errors when combined with Qt, disabled for the time being)
      #set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /analyze")
      #message (STATUS "Enabling static code analysis.")
    endif ()
  endif ()

  if(MSVC11 OR MSVC12)
    #set (COMPILER_SETTINGS_ALL "${COMPILER_SETTINGS_ALL} /analyze")
    set (CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /d2Zi+")
    set (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /d2Zi+")
  endif()

  set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Ob1")
  set (CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /Ox /Ob2 /Oi")
  set (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Ox /Ob2 /Oi")

  set (LINKER_SETTINGS_RELEASE "${LINKER_SETTINGS_RELEASE} /INCREMENTAL:NO")
  # Remove unreferenced data (does not work together with incremental build)
  set (LINKER_SETTINGS_RELEASE "${LINKER_SETTINGS_RELEASE} /OPT:REF")
  # Don't know what it does, but Clemens wants it :-) (does not work together with incremental build)
  set (LINKER_SETTINGS_RELEASE "${LINKER_SETTINGS_RELEASE} /OPT:ICF")

  add_definitions(-D_CRT_SECURE_NO_WARNINGS=1)

  # Enable SSE4.1 for Clang on Windows.
  # Todo: In general we should make this configurable. As of writing SSE4.1 is always active for windows builds (independent of the compiler)
  if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse4.1")
  endif()

elseif (BUILDSYSTEM_COMPILER_CLANG)
  # Cmake complains that this is not defined on OSX make build.
  if(EZ_COMPILE_ENGINE_AS_DLL)
    set (CMAKE_CPP_CREATE_DYNAMIC_LIBRARY ON)
  else ()
    set (CMAKE_CPP_CREATE_STATIC_LIBRARY ON)
  endif ()
  # Enable c++11 features
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -stdlib=libc++")

elseif (BUILDSYSTEM_COMPILER_GCC)
  # dynamic linking will fail without fPIC (plugins)
  # Wno-enum-compare removes all annoying enum cast warnings
  # std=c++14 is - well needed for c++14.
  # gdwarf-3 will use the old debug info which is compatible with older gdb versions.
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -Wno-enum-compare -std=c++14 -mssse3 -mfpmath=sse -gdwarf-3")
  set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -gdwarf-3")

else ()
  message (FATAL_ERROR "Not settings are defined for the selected compiler. Please extend CMAKE_GeneralConfig.txt.")
endif ()


#########################################################################################
## Code that depends on the values of the configuration variables

if (EZ_COMPILE_ENGINE_AS_DLL)
    message (STATUS "Linking to the Engine through DLLs.")
    add_definitions (-DBUILDSYSTEM_COMPILE_ENGINE_AS_DLL)
else ()
    message (STATUS "Linking to the Engine through Static Libraries.")
endif ()

add_definitions (-DBUILDSYSTEM_CONFIGURATION="${BUILDSYSTEM_CONFIGURATION}")

#########################################################################################
## additional preprocessor definitions



#########################################################################################
## Enet support

if (EZ_ENABLE_ENET_SUPPORT)
  add_definitions (-DBUILDSYSTEM_ENABLE_ENET_SUPPORT)
endif()

#########################################################################################
## Lua support

if (EZ_ENABLE_LUA_SUPPORT)
  add_definitions (-DBUILDSYSTEM_ENABLE_LUA_SUPPORT)
endif()

#########################################################################################
## zlib support

if (EZ_ENABLE_ZLIB_SUPPORT)
  add_definitions (-DBUILDSYSTEM_ENABLE_ZLIB_SUPPORT)
endif()

#########################################################################################
## Windows Mixed Reality support (UWP only)

if (EZ_ENABLE_MIXEDREALITY_SUPPORT AND BUILDSYSTEM_PLATFORM_WINDOWS_UWP)
  add_definitions (-DBUILDSYSTEM_ENABLE_MIXEDREALITY_SUPPORT)
endif()

#########################################################################################
## UserConfig.h and CMake Configuration

if (EZ_IGNORE_USERCONFIG_HEADER)

  add_definitions (-DBUILDSYSTEM_IGNORE_USERCONFIG_HEADER)

  set (EZ_USE_PROFILING ON CACHE BOOL "Whether the code for profiling should be compiled in -> #define EZ_USE_PROFILING EZ_ON")
  set (EZ_COMPILE_FOR_DEVELOPMENT ON CACHE BOOL "Enables various debug checks even in release builds -> #define EZ_COMPILE_FOR_DEVELOPMENT EZ_ON")
  set (EZ_USE_ALLOCATION_STACK_TRACING ON CACHE BOOL "Enables stack tracing for all allocations for easier memory leak detection -> #define EZ_USE_ALLOCATION_STACK_TRACING EZ_ON")

  if (EZ_USE_PROFILING)
    add_definitions(-DBUILDSYSTEM_USE_PROFILING)
  endif()

  if (EZ_COMPILE_FOR_DEVELOPMENT)
    add_definitions(-DBUILDSYSTEM_COMPILE_FOR_DEVELOPMENT)
  endif()

  if (EZ_USE_ALLOCATION_STACK_TRACING)
    add_definitions(-DBUILDSYSTEM_USE_ALLOCATION_STACK_TRACING)
  endif()

  # EZ_COMPILE_ENGINE_AS_DLL is always set through CMake as it determines how the solution is created
  # However, when EZ_IGNORE_USERCONFIG_HEADER is enabled, the C++ #define 'EZ_COMPILE_ENGINE_AS_DLL' will be set always identical to what is configured in CMake.
  # If it the UserConfig.h is used, however, one needs to ensure that what 5

else()

  unset(EZ_USE_PROFILING CACHE)
  unset(EZ_COMPILE_FOR_DEVELOPMENT CACHE)
  unset(EZ_USE_ALLOCATION_STACK_TRACING CACHE)

endif()



#########################################################################################
## packages that should be enabled

# Enable OpenMP support, if possible
# Takes ages on non-windows systems and is executed every time. Also we won't use it anyway.
# find_package (OpenMP)



#########################################################################################

# Enable OpenMP
if (OPENMP_FOUND)
    set (COMPILER_SETTINGS "${COMPILER_SETTINGS} ${OpenMP_CXX_FLAGS}")
endif ()


#########################################################################################
## Macro to enable pre-compiled headers

MACRO(ADD_MSVC_PRECOMPILED_HEADER)
  IF(MSVC)
    set (PCH_FOUND false)

    foreach (src_file ${ALL_SOURCE_FILES})
      GET_FILENAME_COMPONENT(RawFilename ${src_file} NAME)
      GET_FILENAME_COMPONENT(Extension ${src_file} EXT)

      if (${Extension} STREQUAL ".cpp")
        if (RawFilename STREQUAL "PCH.cpp")
          set (PCH_FOUND true)
        endif()
      endif ()

    endforeach ()

    if (NOT EZ_USE_PCH)
      set (PCH_FOUND false)
    endif()

    if (PCH_FOUND)
      message (STATUS "Enabling Precompiled Header for this project.")
      set_source_files_properties("PCH.cpp" PROPERTIES COMPILE_FLAGS "/YcPCH.h")

      # Remove CMAKE's increase of the max pre-compiled header size (/Zm1000)
      # as this will cause C1027 errors during compiling due to ASLR.
      if (NOT CMAKE_CXX_FLAGS)
        message (FATAL_ERROR "CMAKE_CXX_FLAGS is empty! Cause unknown but clear cache and rerun configure solves the problem.")
      endif ()

      string(REGEX REPLACE "/Zm[0-9]+ *" "" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
      # Force the above change into the cache.
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" CACHE STRING "" FORCE)


      foreach (src_file ${ALL_SOURCE_FILES})
        GET_FILENAME_COMPONENT(RawFilename ${src_file} NAME)
        GET_FILENAME_COMPONENT(Extension ${src_file} EXT)

        if (${Extension} STREQUAL ".cpp")
          if (NOT RawFilename STREQUAL "PCH.cpp")
            # We don't want to enable PCH usage for QRC files (they all start with qrc_)
            #if (NOT ${src_file} MATCHES ".*(/moc_|/qrc_).*")
			if (NOT ${src_file} MATCHES ".*(/qrc_).*")
              set_source_files_properties (${src_file} PROPERTIES COMPILE_FLAGS "/YuPCH.h")
            endif ()
          endif ()
        endif ()

      endforeach ()

    endif()

  ENDIF(MSVC)
ENDMACRO(ADD_MSVC_PRECOMPILED_HEADER)

#########################################################################################
## Macro to enable/disable application projects

MACRO(BUILD_APPLICATION_PROJECT)
  get_filename_component (PROJECT_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)
  string(TOUPPER ${PROJECT_NAME} PROJECT_NAME_UPPER)
  set(EZ_BUILD_APPLICATION_${PROJECT_NAME_UPPER} ON CACHE BOOL "Whether to build the application '${PROJECT_NAME_UPPER}'")

  if (NOT EZ_BUILD_APPLICATION_${PROJECT_NAME_UPPER})
    return ()
  endif ()
ENDMACRO()


#########################################################################################
## Macro to include directX dependencies

MACRO(BUILD_REQUIRES_DX11)
  if (${BUILDSYSTEM_PLATFORM_WINDOWS})
    set (EZ_REQUIRES_DX11 ON)
    find_package (DirectX11)
    set (LINK_LIBRARIES ${LINK_LIBRARIES} ${DirectX11_D3D11_LIBRARIES})
  else ()
    get_filename_component (BUILD_REQUIRES_DX11_MACRO_FOLDERNAME ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)
    message (FATAL_ERROR "Platform '${CMAKE_SYSTEM_NAME}' does not support DirectX. Exclude the project '${BUILD_REQUIRES_DX11_MACRO_FOLDERNAME}' with 'BUILD_CONDITIONAL'!")
  endif ()
ENDMACRO()

MACRO(DX11_COPY_DLLS)
  if (${EZ_REQUIRES_DX11})
    if (${BUILDSYSTEM_PLATFORM_64BIT})
       set (DX11_COPY_DLLS_BIT "x64")
    else ()
       set (DX11_COPY_DLLS_BIT "x86")
    endif ()

    if( ${DirectX11_LIBRARY} MATCHES "/8\\.0/")
       set (DX11_COPY_DLLS_WINSDKVERSION "8.0")
       set (DX11_COPY_DLLS_DLL_VERSION "46")
    elseif( ${DirectX11_LIBRARY} MATCHES "/8\\.1/")
       set (DX11_COPY_DLLS_WINSDKVERSION "8.1")
       set (DX11_COPY_DLLS_DLL_VERSION "47")
    elseif( ${DirectX11_LIBRARY} MATCHES "/10/")
       set (DX11_COPY_DLLS_WINSDKVERSION "10")
       set (DX11_COPY_DLLS_DLL_VERSION "47")
    endif ()

    if (${DX11_COPY_DLLS_WINSDKVERSION})
      add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
        "%ProgramFiles(x86)%/Windows Kits/${DX11_COPY_DLLS_WINSDKVERSION}/Redist/D3D/${DX11_COPY_DLLS_BIT}/d3dcompiler_${DX11_COPY_DLLS_DLL_VERSION}.dll"
        $<TARGET_FILE_DIR:${PROJECT_NAME}>)
    endif ()
  endif ()
ENDMACRO()


#########################################################################################
## Macro to skip a Qt-only project if EZ_ENABLE_QT_SUPPORT is not enabled globally

MACRO(BUILD_REQUIRES_QT)
  if (EZ_QTPROJECT AND NOT EZ_ENABLE_QT_SUPPORT)
    get_filename_component (BUILD_REQUIRES_QT_MACRO_FOLDERNAME ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)
    Message (STATUS "Skipping ${BUILD_REQUIRES_QT_MACRO_FOLDERNAME}. Requires Qt which is disabled.")
    return ()
  endif ()
ENDMACRO()


#########################################################################################
## Macro to enable qt support for this library / project and store the required modules

MACRO(QT_MODULES modules)
  SET (EZ_QTPROJECT ON)
  SET (EZ_QT_MODULES ${ARGV})
ENDMACRO()


#########################################################################################
## Macro to skip a project / library if a certain conditional is not met.

MACRO(BUILD_CONDITIONAL expression)
  # Negating this in place doesn't work as cmake does not support braces.
  if (${ARGV})

  else ()
    get_filename_component (BUILD_CONDITIONAL_MACRO_FOLDERNAME ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)
    Message (STATUS "Skipping ${BUILD_CONDITIONAL_MACRO_FOLDERNAME}. Not supported in this configuration.")
    return ()
  endif ()
ENDMACRO()


#########################################################################################
## Macro to write the current project into the target list file

MACRO(ADD_TO_TARGET_LIST language)
  file(RELATIVE_PATH ADD_TO_TARGET_LIST_MACRO_FOLDERNAME ${CMAKE_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR})
  file(APPEND ${CMAKE_BINARY_DIR}/Targets.txt "${PROJECT_NAME}|${ADD_TO_TARGET_LIST_MACRO_FOLDERNAME}|0|${language}|${LINK_LIBRARIES}\n")
ENDMACRO()


#########################################################################################
## Macro to write the current project into the tests list file

MACRO(ADD_TEST needs_hardware_access)
  set (ADD_TEST_MACRO_HWA 0)
  if (${needs_hardware_access})
    set (ADD_TEST_MACRO_HWA 1)
  else ()
    set (ADD_TEST_MACRO_HWA 0)
  endif ()

  get_filename_component (ADD_TEST_MACRO_FOLDERNAME ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)

  file(APPEND ${CMAKE_BINARY_DIR}/Tests.txt "${ADD_TEST_MACRO_FOLDERNAME}|${ADD_TEST_MACRO_HWA}|0\n")
ENDMACRO()


#########################################################################################
## Include directories

include_directories ("${CMAKE_CURRENT_LIST_DIR}/../../Engine")  # this way it will also work for applications
include_directories ("${CMAKE_CURRENT_LIST_DIR}/../../Tools")
include_directories ("${CMAKE_CURRENT_LIST_DIR}/../../../Projects")
include_directories ("${CMAKE_CURRENT_LIST_DIR}/../../../Tools")
include_directories ("${CMAKE_CURRENT_LIST_DIR}/../../../Games")
include_directories ("${CMAKE_CURRENT_LIST_DIR}/../../../Samples")
include_directories ("${CMAKE_CURRENT_LIST_DIR}/../../../UnitTests")
include_directories ("${CMAKE_CURRENT_LIST_DIR}/../../ThirdParty")

#########################################################################################
## Functions for external libraries
include (${CMAKE_CURRENT_LIST_DIR}/ExternalLibraries/CMAKE_AllExternalLibraries.txt)