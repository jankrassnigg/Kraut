#cmake

# Get the name of this folder
list (GET LIST_CURRENT_FOLDER -1 CURRENT_FOLDER)

file (GLOB HEADER_FILES "${CURRENT_FOLDER}/*.h" "${CURRENT_FOLDER}/*.hpp")
file (GLOB INLINE_FILES "${CURRENT_FOLDER}/*.inl")
file (GLOB SOURCE_FILES "${CURRENT_FOLDER}/*.cpp" "${CURRENT_FOLDER}/*.c")
file (GLOB RESOURCE_FILES "${CURRENT_FOLDER}/*.rc" "${CURRENT_FOLDER}/*.ico")

if (EZ_ENABLE_QT_SUPPORT AND EZ_QTPROJECT)
  file (GLOB     UI_FILES "${CURRENT_FOLDER}/*.ui")
  file (GLOB    QRC_FILES "${CURRENT_FOLDER}/*.qrc")
  file (GLOB  MOC_HEADERS "${CURRENT_FOLDER}/*.moc.h")
  
  # Add user defined headers to the list
  if (EZ_MOC_HEADERS)
    set(MOC_HEADERS ${MOC_HEADERS} ${EZ_MOC_HEADERS})
    set(EZ_MOC_HEADERS false)
  endif()
endif ()

foreach (CUR_SOURCE ${SOURCE_FILES})
  get_filename_component(RawFilename ${CUR_SOURCE} NAME)
  string(SUBSTRING ${RawFilename} 0 5 STARTS_WITH)   
  if (${STARTS_WITH} STREQUAL "unity")
    list(REMOVE_ITEM SOURCE_FILES ${CUR_SOURCE})
  endif ()  
endforeach ()

set (ALL_SOURCE_FILES ${ALL_SOURCE_FILES} ${HEADER_FILES})
set (ALL_SOURCE_FILES ${ALL_SOURCE_FILES} ${INLINE_FILES})
set (ALL_SOURCE_FILES ${ALL_SOURCE_FILES} ${SOURCE_FILES})

if (BUILDSYSTEM_PLATFORM_WINDOWS_DESKTOP)
	set (ALL_SOURCE_FILES ${ALL_SOURCE_FILES} ${RESOURCE_FILES})
endif()

if (EZ_ENABLE_QT_SUPPORT AND EZ_QTPROJECT)
  set (ALL_SOURCE_FILES ${ALL_SOURCE_FILES} ${UI_FILES})
  set (ALL_SOURCE_FILES ${ALL_SOURCE_FILES} ${QRC_FILES})
  #set (ALL_SOURCE_FILES ${ALL_SOURCE_FILES} ${MOC_HEADERS})

  if (UI_FILES)
    QT5_WRAP_UI (UI_HEADERS ${UI_FILES})

    set (ALL_SOURCE_FILES ${ALL_SOURCE_FILES} ${UI_HEADERS})
    source_group (QT\\UI FILES ${UI_FILES} ${UI_HEADERS})
  endif ()

  if (MOC_HEADERS)
    # QT5_WRAP_CPP appends to the MOC_FILES variable. So we have to empty it first.
    set (MOC_FILES "")
	QT5_WRAP_CPP (MOC_FILES ${MOC_HEADERS} OPTIONS -b PCH.h)
    set (ALL_SOURCE_FILES ${ALL_SOURCE_FILES} ${MOC_FILES})
    source_group (QT\\MOC FILES ${MOC_FILES})
  endif ()

  if (QRC_FILES)
    QT5_ADD_RESOURCES (QRC_OUTPUT ${QRC_FILES})

    set (ALL_SOURCE_FILES ${ALL_SOURCE_FILES} ${QRC_OUTPUT})
    source_group (QT\\QRC FILES ${QRC_FILES} ${QRC_OUTPUT})
  endif ()
endif ()

if (EZ_ENABLE_FOLDER_UNITY_FILES)
  SET(SOURCE_FILES_CLEANED ${SOURCE_FILES} ${MOC_FILES})
  foreach (CUR_SOURCE ${SOURCE_FILES} ${MOC_FILES})
    list (FIND FILES_IN_UNITY ${CUR_SOURCE} _index)
    get_filename_component(RawFilename ${CUR_SOURCE} NAME)
    get_filename_component(Extension ${CUR_SOURCE} EXT)
    if (RawFilename STREQUAL "PCH.cpp" OR ${_index} GREATER -1 OR ${Extension} STREQUAL ".c")
      list(REMOVE_ITEM SOURCE_FILES_CLEANED ${CUR_SOURCE})
    endif ()
  endforeach()
  # generate unity.cpp
  if (SOURCE_FILES_CLEANED)
    string(SHA1 CURRENT_FOLDER_HASH ${CURRENT_FOLDER})
    file(RELATIVE_PATH CURRENT_FOLDER_RELATIVE ${CMAKE_SOURCE_DIR} ${CURRENT_FOLDER})
    set (FOLDER_UNITY_FOLDER "${CMAKE_BINARY_DIR}/${CURRENT_FOLDER_RELATIVE}")
    set (FOLDER_UNITY_FILE "${CMAKE_BINARY_DIR}/${CURRENT_FOLDER_RELATIVE}/unity_${CURRENT_FOLDER_HASH}.cpp")
    set (TMP_UNITY_FILE "${CMAKE_BINARY_DIR}/temp/unity.cpp")
    #message (STATUS "Generating ${FOLDER_UNITY_FILE}")

    # if wished add the necessary comment lines to allow easy PVS static analysis
    if (EZ_ENABLE_PVS_STUDIO_HEADER_IN_UNITY_FILES)
      file (WRITE ${TMP_UNITY_FILE} "// This is an open source non-commercial project. Dear PVS-Studio, please check it.\n// PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com \n// generated unity cpp file\n")
    else()
      file (WRITE ${TMP_UNITY_FILE} "// generated unity cpp file\n")	
    endif ()
    
    if (EZ_USE_PCH)
      set (PCH_FOUND false)
      set (PCH_FILE)

      foreach (src_file ${ALL_SOURCE_FILES} ${HEADER_FILES})
        get_filename_component(RawFilename ${src_file} NAME)
        get_filename_component(Extension ${src_file} EXT)

        if (${Extension} STREQUAL ".h")
          if (RawFilename STREQUAL "PCH.h")
            set (PCH_FOUND true)
            set (PCH_FILE ${src_file})
          endif()
        endif ()

      endforeach ()
      
      if (PCH_FOUND)
        #if (LIBRARY_PCH)
        #  file(RELATIVE_PATH PCH_FILE ${PARENT_FOLDER} ${PCH_FILE})
        #else ()
          get_filename_component(PCH_FILE ${PCH_FILE} NAME)
        #endif()
        file(APPEND ${TMP_UNITY_FILE} "#include <${PCH_FILE}>\n\n")
      endif ()
    endif()
    foreach (COMPILED_FILE ${SOURCE_FILES_CLEANED})
      file(TO_NATIVE_PATH ${COMPILED_FILE} COMPILED_FILE_NAME)
      file (APPEND ${TMP_UNITY_FILE} "#include \"${COMPILED_FILE_NAME}\"\n")
      set_source_files_properties(${COMPILED_FILE} PROPERTIES HEADER_FILE_ONLY TRUE)
    endforeach ()
    set (UNITY_FILE_NEEDS_UPDATE TRUE)
    if(EXISTS ${FOLDER_UNITY_FILE})
      file(SHA1 ${FOLDER_UNITY_FILE} UNITY_EXISTING_HASH)
      file(SHA1 ${TMP_UNITY_FILE} UNITY_NEW_HASH)
      #message (STATUS "Hash 1: ${UNITY_EXISTING_HASH}")     
      #message (STATUS "Hash 2: ${UNITY_NEW_HASH}")       
      if(${UNITY_EXISTING_HASH} STREQUAL ${UNITY_NEW_HASH})
        set (UNITY_FILE_NEEDS_UPDATE FALSE)
      endif()
    endif()
    if(${UNITY_FILE_NEEDS_UPDATE})
      message (STATUS "Writing ${FOLDER_UNITY_FILE}")
      file (READ ${TMP_UNITY_FILE} UNITY_FILE_CONTENTS)
      file (WRITE ${FOLDER_UNITY_FILE} ${UNITY_FILE_CONTENTS})
    endif()
    set (SOURCE_FILES ${SOURCE_FILES} ${FOLDER_UNITY_FILE})
    set (ALL_SOURCE_FILES ${ALL_SOURCE_FILES} ${FOLDER_UNITY_FILE})
    set (FILES_IN_UNITY ${FILES_IN_UNITY} ${SOURCE_FILES_CLEANED})
  endif()
endif ()

set (SOURCE_GROUP_FOLDER "")

# put all the files in an identically named folder in the visual studio solution, to mimic the file system
foreach (VAR ${LIST_SOURCE_GROUP_FOLDER})
    set (SOURCE_GROUP_FOLDER "${SOURCE_GROUP_FOLDER}\\${VAR}")
endforeach ()

source_group ("${SOURCE_GROUP_FOLDER}" FILES ${HEADER_FILES} ${INLINE_FILES} ${SOURCE_FILES} ${UI_FILES} ${QRC_FILES} ${MOC_HEADERS})

# find all cmake files below this directory
file (GLOB DIRS "${CURRENT_FOLDER}/*/CMakeLists.txt")

# add all those directories to the to-be-processed queue
foreach (VAR ${DIRS})

    # add directory to the queue
    include (${VAR})

endforeach ()

