#cmake

#########################################################################################
## CMAKE Policies

# disables auto-linking to qtmain (new in Qt 5.1)
if (POLICY CMP0020)
  cmake_policy(SET CMP0020 NEW)
endif ()

if (POLICY CMP0022)
  cmake_policy(SET CMP0022 NEW)
endif()

# enable error on add dependency not existing
if (POLICY CMP0046)
  cmake_policy(SET CMP0046 NEW)
endif ()

# Get the name of this folder
get_filename_component (CUR_FOLDER_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)
get_filename_component (PARENT_FOLDER ${CMAKE_CURRENT_SOURCE_DIR} PATH)
get_filename_component (PARENT_FOLDER_NAME ${PARENT_FOLDER} NAME_WE)

# the library name
set (PROJECT_NAME "${CUR_FOLDER_NAME}")
set (PROJECT_FOLDER_NAME ${CUR_FOLDER_NAME})

message (STATUS "Adding Plugin: ${PROJECT_NAME}")

set (LIST_SOURCE_GROUP_FOLDER "")
set (LIST_CURRENT_FOLDER ${CMAKE_CURRENT_SOURCE_DIR})
set (ALL_SOURCE_FILES "")

set (LIBRARY_PCH FALSE)

include (${CMAKE_CURRENT_LIST_DIR}/CMAKE_Qt.txt)
include (${CMAKE_SOURCE_DIR}/Code/BuildSystem/CMake/CMAKE_LibraryFolder.txt)

set (APP_CONFIG "")

if (IS_WIN32_APPLICATION)
	set (APP_CONFIG "WIN32")
endif ()

# add the name of the library to the list of libs to be exported
set_property (GLOBAL APPEND PROPERTY ALL_KNOWN_PROJECTS ${PROJECT_NAME})

# if this library uses a precompile header
if (BUILDSYSTEM_MSVC)
  ADD_MSVC_PRECOMPILED_HEADER()
endif ()

string(TOUPPER ${PROJECT_NAME} PROJECT_NAME_UPPER)
add_definitions (-DBUILDSYSTEM_BUILDING_${PROJECT_NAME_UPPER}_LIB)

# Add the application source directory as an additional include dir (required to find PCH.h etc.)
include_directories (${CMAKE_CURRENT_SOURCE_DIR})

# Define the Exe Project, add all required sources to it
add_library (${PROJECT_NAME} SHARED ${APP_CONFIG} ${ALL_SOURCE_FILES})

set_target_properties(${PROJECT_NAME} PROPERTIES IMPORT_PREFIX "ez")
set_target_properties(${PROJECT_NAME} PROPERTIES PREFIX "ez")

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
file(RELATIVE_PATH RELATIVE_PARENT_FOLDER ${CMAKE_SOURCE_DIR} ${PARENT_FOLDER})
SET_PROPERTY(TARGET ${PROJECT_NAME} PROPERTY FOLDER ${RELATIVE_PARENT_FOLDER})

target_link_libraries (${PROJECT_NAME} ${LINK_LIBRARIES} ${QT_LIBRARIES} ${OPENGL_gl_LIBRARY} ${OPENGL_glu_LIBRARY})

# Add additional dependencies
if (ADDITIONAL_DEPENDENCIES)
  add_dependencies(${PROJECT_NAME} ${ADDITIONAL_DEPENDENCIES})
endif ()



if (COMPILER_SETTINGS_ALL)
  set_target_properties (${PROJECT_NAME} PROPERTIES COMPILE_FLAGS "${COMPILER_SETTINGS_ALL}")
endif()
  
if (COMPILER_SETTINGS_RELEASE)
  target_compile_options(${PROJECT_NAME} PUBLIC $<$<CONFIG:RELEASE>:${COMPILER_SETTINGS_RELEASE}>)
  target_compile_options(${PROJECT_NAME} PUBLIC $<$<CONFIG:RELWITHDEBINFO>:${COMPILER_SETTINGS_RELEASE}>)
endif()

if (COMPILER_SETTINGS_DEBUG)
  target_compile_options(${PROJECT_NAME} PUBLIC $<$<CONFIG:DEBUG>:${COMPILER_SETTINGS_DEBUG}>)
endif ()


if (LINKER_SETTINGS_ALL)
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_DEBUG          ${LINKER_SETTINGS_ALL})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_RELWITHDEBINFO ${LINKER_SETTINGS_ALL})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_RELEASE        ${LINKER_SETTINGS_ALL})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_MINSIZEREL     ${LINKER_SETTINGS_ALL})
endif ()
if (LINKER_SETTINGS_DEBUG)
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_DEBUG          ${LINKER_SETTINGS_DEBUG})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_RELWITHDEBINFO ${LINKER_SETTINGS_DEBUG})

endif ()
if (LINKER_SETTINGS_RELEASE)
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_RELEASE        ${LINKER_SETTINGS_RELEASE})
  set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS_MINSIZEREL     ${LINKER_SETTINGS_RELEASE})
endif ()

QT_ADD_MODULES()
DX11_COPY_DLLS()

# Add to target list
ADD_TO_TARGET_LIST(C++)
